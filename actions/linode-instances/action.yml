name: 'Fetch Linode Instances'
description: 'Fetch the Linode instances with tags matching the given environment'

inputs:
  environment:
    description: 'The environment to deploy to and corresponding git branch'
    required: false
    default: |
      production=main
      staging=develop
      development=develop
  branch:
    description: 'The branch to deploy'
    required: false
  linode_token:
    description: 'Linode Personal Access Token'
    required: true
  git_repo:
    description: 'The git repository to deploy'
    required: false

runs:
  using: "composite"
  steps:
    - name: Setup branch and repository
      shell: bash
      run: |
        BRANCH="${{ inputs.branch }}"
        if [ -z "$BRANCH" ]; then
          BRANCH="${GITHUB_REF#refs/heads/}"
        fi
        echo "BRANCH=$BRANCH" >> $GITHUB_ENV
        
        REPO="${{ inputs.git_repo }}"
        if [ -z "$REPO" ]; then
          REPO="${GITHUB_REPOSITORY#*/}"
        fi
        echo "REPO=$REPO" >> $GITHUB_ENV

    - name: Setup environment
      shell: bash
      run: |
        while IFS= read -r line
        do
            IFS="=" read -a STR <<< "$line"
            if [ "${{ env.BRANCH }}" == "${STR[1]}" ]; then
                echo "ENVIRONMENT=${STR[0]}" >> $GITHUB_ENV
            fi
        done <<< "${{ inputs.environment }}"

    - name: Fetch Linode instances
      shell: bash
      run: |
        curl -H "Authorization: Bearer ${{ inputs.linode_token }}" \
          https://api.linode.com/v4/linode/instances \
          | jq -c '.data[] | select((.tags[] | contains("environment:" + "${{ env.ENVIRONMENT }}")) and (.tags[] | contains("vcs:${{ env.REPO }}")))' \
          > linode_instances.json
        INSTANCES=$(jq -cs '[.[] | .ipv4[0]]' linode_instances.json)
        if [ -z "$INSTANCES" ]; then
            INSTANCES="[]"
        fi
        echo "::set-output name=linode_instances::$INSTANCES"
      id: linode_instances

outputs:
  linode_instances:
    description: "The IPs of the Linode instances"
    value: ${{ steps.linode_instances.outputs.linode_instances }}
